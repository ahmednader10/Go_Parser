import java.io.*;
import java_cup.runtime.*;

/*
parser code {:
:};*/
	

/* Terminals (tokens returned by the scanner). */
terminal			BREAK, DEFAULT, FUNC, 
					CASE,STRUCT, ELSE, PACKAGE,
					SWITCH, CONST, IF, TYPE,
					FOR, IMPORT, RETURN, VAR,
					OR_OP, AND_OP,
					PLUS, MINUS, OPEN_PARAN,
					CLOSE_PARAN, OPEN_CURLY, CLOSE_CURLY,
					OPEN_SQUARE, CLOSE_SQUARE, SEMI_COLON,
					COMMA, DOT, COLON, COLON_EQUAL, EQUAL,
					CDOTS, ASTRISK, SHIFT_LEFT, SHIFT_RIGHT,
					BAR, SLASH, EXCLAMATION, LESS_DASH, ERROR,
					AMBERSAND, PERCENT, INCREMENT, DECREMENT;
terminal	String	IDENTIFIER, STRING_LIT, INT_LIT,REL_OP;				

/* Non-terminals */
nonterminal	String	binary_op, add_op, mul_op, unary_op, ArrayType, ArrayLength, Expression, UnaryExpr,
					PrimaryExpr, Operand, Literal, BasicLit, FunctionLit, Selector, Index,
					Function, FunctionBody,Block, StatementList, Statement_zero_more, Arguments,
					Slice, Statement, Declaration, TopLevelDecl, FunctionDecl, FunctionName, MethodDecl,
					ConstDecl, const_spec_zero_more,
					ConstSpec, TypeDecl, type_spec_zero_more, TypeSpec, VarDecl, VarSpec,
					var_spec_zero_more, SimpleStmt,
					ExpressionStmt, IncDecStmt, Assignment, assign_op, ShortVarDecl, IfStmt,
					SwitchStmt, ExprSwitchStmt, ExprCaseClause,
					Expr_case_clause_zero_more, ExprSwitchCase, ForStmt, Condition,
					ForClause, InitStmt, PostStmt, CompositeLit, LiteralType, LiteralValue,
					ElementList, KeyedElement, Key, FieldName, Element, keyed_element_zero_more,
					OperandName, QualifiedIdent, 
					MethodExpr, Receiver, ReceiverType, ElementType, TypeName, Type, TypeLit,
					SliceType, StructType, Field_decl_zero_more, FieldDecl, AnonymousField, IdentifierList,
					Identifier_zero_more, Tag, FunctionType, Signature, Result, Parameter_decl_zero_more,
					Parameters, ParameterList, 
					ParameterDecl, MethodName, PackageName,
					PackageClause, ImportPath, ImportSpec, import_spec_zero_more,
					 top_level_zero_more, import_decl_zero_more,
					 ImportDecl, BreakStmt, SourceFile,
					ReturnStmt, expression_zero_more, ExpressionList;

/* REL_OP,
			ASTRISK, SHIFT_LEFT, SHIFT_RIGHT,
					BAR, SLASH, EXCLAMATION, LESS_DASH, 
					AMBERSAND, PERCENT, INCREMENT, DECREMENT		PLUS, MINUS, */

precedence left SEMI_COLON;
precedence left COMMA;
precedence left OPEN_PARAN;
precedence left REL_OP, AND_OP, OR_OP;
precedence left PLUS, MINUS, BAR;
precedence left ASTRISK, PERCENT, SLASH, SHIFT_LEFT, SHIFT_RIGHT, AMBERSAND;
precedence left FUNC;


start with SourceFile;

/* The grammar */
binary_op ::= 	OR_OP
				{: 
				     
				:}
				| AND_OP
				{: 
						 
				:}
				| REL_OP
				{: 
						 
				:}
				| add_op
				{: 
						 
				:}
				| mul_op
				{: 
						 
				:};
add_op ::= 		PLUS
				{: 
				    	 
				:}
				| MINUS
				{: 
						 
				:}
				| BAR
				{: 
						 
				:};
mul_op ::= 		ASTRISK
				{: 
				    	 
				:}
				| SLASH
				{: 
						 
				:}
				| PERCENT
				{: 
						 
				:}
				| SHIFT_LEFT
				{: 
						 
				:}
				| SHIFT_RIGHT
				{: 
						 
				:}
				| AMBERSAND
				{: 
						 
				:};
unary_op ::= 	PLUS
				{: 
				    	 
				:}
				| MINUS
				{: 
						 
				:}
				| EXCLAMATION
				{: 
						 
				:}
				| ASTRISK
				{: 
						 
				:}
				| AMBERSAND
				{: 
						 
				:}
				| LESS_DASH
				{: 
						 
				:};
ArrayType ::= 	OPEN_SQUARE ArrayLength CLOSE_SQUARE ElementType 
				{: 
				    	 
				:};
ArrayLength ::= Expression 
				{: 
				    	 
				:};
Expression ::= UnaryExpr
				{:
				
				:}
				| Expression binary_op Expression
				{:
				:};
UnaryExpr ::= 	PrimaryExpr
				{:
				
				:}
				| unary_op UnaryExpr
				{:
				:};
Operand ::= 	Literal
				{:
					System.out.println("literal from operand");
				:}
				| OperandName
				{:
				:}
				| MethodExpr
				{:
				:}
				| OPEN_PARAN Expression CLOSE_PARAN
				{:
				:};
Literal ::= 	BasicLit
				{:
				
				:}
				| CompositeLit
				{:
				:}
				| FunctionLit
				{:
					System.out.println("function literal from literal");
				:};
BasicLit ::= 	INT_LIT
				{:
				
				:}
				| STRING_LIT
				{:
				:};
FunctionLit ::= FUNC Function
				{:
					System.out.println("function literal");
				:};
PrimaryExpr ::=  Operand
				{:
				
				:}
				| PrimaryExpr Selector
				{:
				:}
				| PrimaryExpr Index
				{:
				:}
				| PrimaryExpr Slice
				{:
				:}
				| PrimaryExpr Arguments
				{:
				:};
Selector ::=  DOT IDENTIFIER
				{:
				
				:};
Index ::=  OPEN_SQUARE Expression CLOSE_SQUARE
				{:
				
				:};
Slice ::=  		OPEN_SQUARE Expression COLON Expression CLOSE_SQUARE
				{:
				
				:}
				| OPEN_SQUARE COLON Expression CLOSE_SQUARE
				{:
				:}
				| OPEN_SQUARE Expression COLON CLOSE_SQUARE
				{:
				:}
				| OPEN_SQUARE Expression COLON Expression COLON Expression CLOSE_SQUARE
				{:
				:}
				| OPEN_SQUARE COLON Expression COLON Expression CLOSE_SQUARE
				{:
				:};
Arguments ::=  	OPEN_PARAN TYPE Type COMMA ExpressionList CLOSE_PARAN
				{:
				
				:}
				| OPEN_PARAN ExpressionList CLOSE_PARAN
				{:
				:}
				| OPEN_PARAN CLOSE_PARAN
				{:
				:};					
Function ::= 	Signature FunctionBody
				{:
					System.out.println("function");
				:};
FunctionBody ::= Block
				{:
					System.out.println("function body");
				:};
Block ::= 		OPEN_CURLY StatementList CLOSE_CURLY
				{:
				
				:};
StatementList ::= Statement_zero_more
				{:
				
				:};
Statement_zero_more ::= {: :} | Statement Statement_zero_more {: :};
Statement ::= 	Declaration
				{:
					System.out.println("statement");
				:}
				| SimpleStmt SEMI_COLON
				{:
				:}
				| ReturnStmt SEMI_COLON
				{:
				:}
				| BreakStmt SEMI_COLON
				{:
				:}
				| Block SEMI_COLON
				{:
				:}
				| Block
				{:
				:}
				| IfStmt SEMI_COLON
				{:
				:}
				| IfStmt
				{:
				:}
				| SwitchStmt SEMI_COLON
				{:
				:}
				| SwitchStmt
				{:
				:}
				| ForStmt SEMI_COLON
				{:
				:}
				| ForStmt
				{:
				:};
Declaration ::= ConstDecl SEMI_COLON
				{:
				
				:}
				| TypeDecl SEMI_COLON
				{:
				:}
				| TypeDecl
				{:
				:}
				| VarDecl SEMI_COLON
				{:
				:};
TopLevelDecl ::= Declaration
				{:
					System.out.println("declaration from top level decl");
				:}
				| FunctionDecl SEMI_COLON
				{:
					System.out.println("function declaration from top level decl with semi colon");
				:}
				| FunctionDecl
				{:
					System.out.println("function declaration from top level decl");
				:}
				| MethodDecl SEMI_COLON
				{:
				:}
				| MethodDecl
				{:
					System.out.println("method declaration from top level decl");
				:};
MethodDecl ::= FUNC Receiver MethodName Function 
				{:
					System.out.println("method decl");
				:}
				| FUNC Receiver MethodName Signature 
				{:
					System.out.println("method decl");
				:};
Receiver ::= Parameters 
			{: 
			:};
FunctionDecl ::= FUNC FunctionName Function
				{:
					System.out.println("function decl");
				:}
				| FUNC FunctionName Signature
				{:
					System.out.println("function decl");
				:};
FunctionName ::= IDENTIFIER:i
				{:
					System.out.println("function name "+i);
				:};
ConstDecl ::= 	CONST ConstSpec
				{:
				
				:}
				| CONST OPEN_PARAN const_spec_zero_more CLOSE_PARAN
				{:
				
				:};
const_spec_zero_more ::= {: :} | ConstSpec SEMI_COLON const_spec_zero_more {: :};
ConstSpec ::= 	IDENTIFIER Type EQUAL Expression
				{:
				
				:}
				|IDENTIFIER EQUAL Expression
				{:
				
				:}
				|IDENTIFIER
				{:
				
				:};
TypeDecl ::= 	TYPE TypeSpec
				{:
				
				:}
				| TYPE OPEN_PARAN type_spec_zero_more CLOSE_PARAN
				{:
				
				:};
type_spec_zero_more ::= {: :} | TypeSpec SEMI_COLON type_spec_zero_more {: :};
TypeSpec ::= 	IDENTIFIER Type
				{:
				
				:};
VarDecl ::= 	VAR VarSpec
				{:
				
				:}
				| VAR OPEN_PARAN var_spec_zero_more CLOSE_PARAN
				{:
				
				:};
var_spec_zero_more ::= {: :} | VarSpec SEMI_COLON var_spec_zero_more {: :};
VarSpec ::= 	IDENTIFIER Type EQUAL Expression
				{:
				
				:}
				| IDENTIFIER Type
				{:
				
				:}
				| IDENTIFIER EQUAL Expression
				{:
				
				:};
SimpleStmt ::= 	ExpressionStmt
				{:
				
				:}
				| IncDecStmt
				{:
				:}
				| Assignment
				{:
				:}
				| ShortVarDecl
				{:
				:};
ExpressionStmt ::= Expression
				{:
				
				:};
IncDecStmt ::= Expression INCREMENT
				{:
				
				:}
				| Expression DECREMENT
				{:
				:};
Assignment ::= ExpressionList assign_op ExpressionList
				{:
				
				:};
assign_op ::= 	add_op EQUAL
				{:
				
				:}
				| mul_op EQUAL
				{:
				
				:};
ShortVarDecl ::= IdentifierList COLON_EQUAL Expression
				{:
				
				:};
IfStmt ::= 		IF SimpleStmt SEMI_COLON Expression Block ELSE IfStmt
				{:
				
				:}
				|IF SimpleStmt SEMI_COLON Expression Block ELSE Block
				{:
				
				:}
				|IF SimpleStmt SEMI_COLON Expression Block
				{:
				
				:}
				| IF Expression Block ELSE IfStmt
				{:
				:}
				| IF Expression Block ELSE Block
				{:
				:}
				| IF Expression Block
				{:
				:};
SwitchStmt ::= 	ExprSwitchStmt
				{:
				
				:};
ExprSwitchStmt ::= SWITCH SimpleStmt SEMI_COLON Expression OPEN_CURLY Expr_case_clause_zero_more CLOSE_CURLY
				{:
				
				:}
				|SWITCH Expression OPEN_CURLY Expr_case_clause_zero_more CLOSE_CURLY
				{:
				
				:}
				| SWITCH SimpleStmt SEMI_COLON OPEN_CURLY Expr_case_clause_zero_more CLOSE_CURLY
				{:
				
				:}
				|SWITCH OPEN_CURLY Expr_case_clause_zero_more CLOSE_CURLY
				{:
				
				:};
Expr_case_clause_zero_more ::= {: :} | ExprCaseClause Expr_case_clause_zero_more {: :};
ExprCaseClause ::= ExprSwitchCase COLON StatementList
				{:
				
				:};
ExprSwitchCase ::= CASE ExpressionList
				{:
				
				:}
				| DEFAULT
				{:
				:};
ForStmt ::= 	FOR Condition Block
				{:
				
				:}
				| FOR ForClause Block
				{:
				:};
Condition ::= 	Expression
				{:
				
				:};
ForClause ::= 	InitStmt SEMI_COLON Condition SEMI_COLON PostStmt
				{:
				
				:}
				| SEMI_COLON Condition SEMI_COLON PostStmt
				{:
				
				:}
				|InitStmt SEMI_COLON SEMI_COLON PostStmt
				{:
				
				:}
				| SEMI_COLON  SEMI_COLON PostStmt
				{:
				
				:}
				|InitStmt SEMI_COLON Condition SEMI_COLON
				{:
				
				:}
				| SEMI_COLON Condition SEMI_COLON
				{:
				
				:}
				|InitStmt SEMI_COLON SEMI_COLON
				{:
				
				:}
				| SEMI_COLON  SEMI_COLON
				{:
				
				:};
InitStmt ::= 	SimpleStmt
				{:
				
				:};
PostStmt ::= 	SimpleStmt
				{:
				
				:};
CompositeLit ::= LiteralType LiteralValue
				{:
				
				:};
LiteralType ::= StructType
				{:
				
				:}
				| ArrayType
				{:
				:}
				| OPEN_SQUARE CDOTS CLOSE_SQUARE ElementType
				{:
				:}
				| SliceType
				{:
				:}
				| TYPE TypeName
				{:
				:};
LiteralValue ::= OPEN_CURLY ElementList CLOSE_CURLY
				{:
				
				:}
				| OPEN_CURLY CLOSE_CURLY
				{:
				
				:};
ElementList ::= KeyedElement keyed_element_zero_more
				{:
				
				:};
keyed_element_zero_more ::= {: :} |COMMA KeyedElement keyed_element_zero_more {: :};
KeyedElement ::= Key COLON Element
				{:
				
				:}
				| Element
				{:
				:};
Key ::= 		FieldName
				{:
				
				:}
				| LiteralValue
				{:
				:};
FieldName ::= 	IDENTIFIER
				{:
				
				:};
Element ::= 	Expression
				{:
				
				:}
				| LiteralValue
				{:
				:};
OperandName ::= IDENTIFIER
				{:
				
				:}
				| QualifiedIdent
				{:
				:};
QualifiedIdent ::= DOT PackageName DOT IDENTIFIER 
				{: 
				    	 
				:};
MethodExpr     ::= DOT ReceiverType DOT MethodName 
				{: 
				    	 
				:};
ReceiverType ::= OPEN_PARAN ASTRISK TypeName CLOSE_PARAN
				{:
				
				:}
				| OPEN_PARAN TypeName CLOSE_PARAN
				{:
				:};				
ElementType ::= Type 
				{: 
				    	 
				:};
TypeName ::= 	IDENTIFIER
				{: 
				    	 
				:};
Type ::= 		TypeName
				{: 
				    	 
				:}
				| TypeLit
				{:
				:};
TypeLit ::= 	ArrayType
				{: 
				    	 
				:}
				| StructType
				{:
				
				:}
				| FunctionType
				{: 
				    	 
				:}
				| SliceType
				{:
				
				:};
SliceType ::= 	OPEN_SQUARE CLOSE_SQUARE ElementType
				{: 
				    	 
				:};
Field_decl_zero_more ::= {: :} | FieldDecl SEMI_COLON Field_decl_zero_more {: :};
StructType ::= 	STRUCT OPEN_CURLY Field_decl_zero_more  CLOSE_CURLY
				{: 
				    	 
				:};
FieldDecl ::= 	IdentifierList Type Tag
				{: 
				    	 
				:}
				| AnonymousField Tag
				{:
				
				:}
				|IdentifierList Type
				{: 
				    	 
				:}
				| AnonymousField
				{:
				
				:};
Identifier_zero_more ::= {: :} | COMMA IDENTIFIER Identifier_zero_more {: :};
IdentifierList ::= 	IDENTIFIER Identifier_zero_more
				{: 
				    	 
				:};
AnonymousField ::= 	ASTRISK TypeName
				{: 
				    	 
				:}
				|TypeName
				{: 
				    	 
				:};
Tag ::= 		STRING_LIT
				{: 
				    	 
				:};
FunctionType ::= FUNC Signature
				{: 
				    System.out.println("function type");
				:};
Signature ::= Parameters Result
				{: 
				    	 
				:}
				|Parameters
				{: 
				    	 
				:};
Result ::= 	Parameters
				{: 
				    	 
				:}
				| OPEN_PARAN Type CLOSE_PARAN
				{:
				
				:};
Parameters ::= OPEN_PARAN ParameterList CLOSE_PARAN
				{: 
				    	 
				:}
				|OPEN_PARAN CLOSE_PARAN
				{: 
				    	 
				:};
Parameter_decl_zero_more ::= {: :} | COMMA ParameterDecl Parameter_decl_zero_more{: :};
ParameterList ::= ParameterDecl Parameter_decl_zero_more
				{: 
				    	 
				:};
ParameterDecl ::= IdentifierList CDOTS Type
				{: 
				    	 
				:}
				|IdentifierList Type
				{: 
				    	 
				:};
MethodName ::= 	IDENTIFIER
				{: 
				    	 
				:};
PackageName ::= IDENTIFIER
				{: 
				    	 
				:};
PackageClause ::= PACKAGE PackageName
				{: 
				    	 System.out.println("package");
				:};
ImportPath ::= 	STRING_LIT 
				{: 
				    	 
				:};
ImportSpec ::= 	DOT ImportPath
				{: 
				    	 
				:}
				| PackageName ImportPath
				{: 
				    	 
				:}
				| ImportPath
				{: 
				    	 
				:};
import_spec_zero_more ::= {: :} | ImportSpec SEMI_COLON import_spec_zero_more
						{:
						:}
						| ImportSpec import_spec_zero_more
						{:
						:};
ImportDecl ::= 	IMPORT ImportSpec
				{: 
				    	 
				:}
				| IMPORT OPEN_PARAN import_spec_zero_more CLOSE_PARAN
				{: 
				    	 
				:};
import_decl_zero_more ::= {: :} | ImportDecl SEMI_COLON import_decl_zero_more
						{:
						:}
						| ImportDecl import_decl_zero_more
						{:
						:};
top_level_zero_more ::= {: :} | TopLevelDecl top_level_zero_more {: :};
BreakStmt ::= 	BREAK 
				{: 
				    	 
				:};
SourceFile ::= PackageClause SEMI_COLON import_decl_zero_more  top_level_zero_more
				{:
					System.out.println("semi colon");
				:}
				|PackageClause import_decl_zero_more  top_level_zero_more 
				{:
					System.out.println("without semi colon");
				:};
ReturnStmt ::= 	RETURN ExpressionList 
				{: 
				    	 
				:}
				|RETURN 
				{: 
				    	 
				:};
expression_zero_more ::= {: :} | COMMA Expression expression_zero_more {: :};
ExpressionList ::= 	Expression expression_zero_more 
				{: 
				    	 
				:};
