import java.io.*;
import java_cup.runtime.*;

/*
parser code {:
:};*/
	

/* Terminals (tokens returned by the scanner). */
terminal			BREAK, DEFAULT, FUNC, 
					CASE,STRUCT, ELSE, PACKAGE,
					SWITCH, CONST, IF, TYPE,
					FOR, IMPORT, RETURN, VAR,
					OR_OP, AND_OP,
					PLUS, MINUS, OPEN_PARAN,
					CLOSE_PARAN, OPEN_CURLY, CLOSE_CURLY,
					OPEN_SQUARE, CLOSE_SQUARE, SEMI_COLON,
					COMMA, DOT, COLON, COLON_EQUAL, EQUAL,
					CDOTS, ASTRISK, SHIFT_LEFT, SHIFT_RIGHT,
					BAR, SLASH, EXCLAMATION, LESS_DASH,
					AMBERSAND, PERCENT, INCREMENT, DECREMENT;
terminal	String	IDENTIFIER, STRING_LIT, INT_LIT,REL_OP;			
	

/* Non-terminals */
nonterminal	String	Literal, BasicLit, FunctionLit, Selector,
					Function, FunctionBody,Block, StatementList, Arguments,
					Statement, Declaration, TopLevelDecl, FunctionDecl, FunctionName, MethodDecl,
					ConstDecl, const_spec_zero_more,
					ConstSpec, VarDecl, VarSpec,
					var_spec_zero_more, SimpleStmt,
					IncDecStmt, Assignment, ShortVarDecl, IfStmt,
					SwitchStmt, ExprSwitchStmt, ExprCaseClause,
					Expr_case_clause_zero_more, ExprSwitchCase, ForStmt, Condition,
					ForClause, InitStmt, PostStmt,
					OperandName, QualifiedIdent, 
					Receiver, TypeName, Type, TypeLit,
					IdentifierList,
					Identifier_zero_more, FunctionType, Signature, Result, Parameter_decl_zero_more,
					Parameters, ParameterList, 
					ParameterDecl, MethodName, PackageName,
					PackageClause, ImportPath, ImportSpec, import_spec_zero_more,
					top_level_zero_more, import_decl_zero_more,
					ImportDecl, BreakStmt, SourceFile,
					ReturnStmt, expression_zero_more, ExpressionList, OpSC;
nonterminal Expr    Expression, UnaryExpr, PrimaryExpr,ExpressionStmt, Operand;

/* REL_OP,
			ASTRISK, SHIFT_LEFT, SHIFT_RIGHT,
					BAR, SLASH, EXCLAMATION, LESS_DASH, 
					AMBERSAND, PERCENT, INCREMENT, DECREMENT		PLUS, MINUS, */

precedence left COMMA;
precedence left OR_OP;
precedence left AND_OP;
precedence left REL_OP;
precedence left PLUS, MINUS, BAR;
precedence left ASTRISK, PERCENT, SLASH, SHIFT_LEFT, SHIFT_RIGHT, AMBERSAND, EXCLAMATION;


start with SourceFile;

/* The grammar */
SourceFile ::= PackageClause SEMI_COLON import_decl_zero_more  top_level_zero_more:tl
				{:
					RESULT = tl;
				:}
				|PackageClause import_decl_zero_more  top_level_zero_more:tl
				{:
					RESULT = tl;
				:};
Expression ::= UnaryExpr:u
				{:	
					
					RESULT = u;
				:}
				| Expression:e REL_OP:r Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+e1.code+RESULT.addr+"="+e.addr+r+e1.addr;
					System.out.println("result code "+RESULT.code);
					System.out.println("result addr "+RESULT.addr);
				:}| Expression:e OR_OP:o Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+o+e1.addr;
				:}| Expression:e AND_OP:a Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+a+e1.addr;
				:}| Expression:e PLUS:p Expression:e1
				{:
					System.out.println("plus1 :" +e.addr);
					System.out.println("plus2 :" +e.code);
					System.out.println("plus3 :" +e1.addr);
					System.out.println("plus4 :" +e1.code);
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+p+e1.addr;
				:}| Expression:e MINUS:m Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+m+e1.addr;
				:}| Expression:e ASTRISK:a Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+a+e1.addr;
				:}| Expression:e SLASH:s Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+s+e1.addr;
				:}| Expression:e PERCENT:p Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+p+e1.addr;
				:}| Expression:e SHIFT_LEFT:s Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+s+e1.addr;
				:}| Expression:e SHIFT_RIGHT:s Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+s+e1.addr;
				:}| Expression:e AMBERSAND:a Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+a+e1.addr;
				:}| Expression:e EXCLAMATION:ex Expression:e1
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = e.code+"\n"+e1.code+"\n"+RESULT.addr+"="+e.addr+ex+e1.addr;
				:};
UnaryExpr ::= 	PrimaryExpr:p
				{:
					RESULT = p;
				:}
				| MINUS:m UnaryExpr:u
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = RESULT.addr+"="+m+u.addr;
				:}| EXCLAMATION:e UnaryExpr:u
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = RESULT.addr+"="+e+u.addr;
				:}| ASTRISK:a UnaryExpr:u
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					RESULT.code = RESULT.addr+"="+a+u.addr;
				:};
Operand ::= 	Literal:l
				{:
					RESULT = new Expr();
					RESULT.addr=l;
					System.out.println("literal from operand: "+l);
				:}
				| OperandName:o
				{:
					RESULT = new Expr();
					System.out.println("operand name from operand: "+o);
					RESULT.addr =o;
				:}
				| OPEN_PARAN Expression:e CLOSE_PARAN
				{:
					RESULT = e;
				:};
Literal ::= 	BasicLit:b
				{:
					RESULT = b;
				:}
				| FunctionLit:f
				{:
					RESULT=f;
					System.out.println("function literal from literal");
				:};
BasicLit ::= 	INT_LIT:i
				{:
					RESULT = i;
				:}
				| STRING_LIT:s
				{:
					RESULT=s;
				:};
FunctionLit ::= FUNC Function:f
				{:	
					RESULT=f;
					System.out.println("function literal");
				:};
PrimaryExpr ::=  Operand:o
				{:
					System.out.println("operand "+o.addr);
					RESULT= o;
				:}
				| PrimaryExpr:p Arguments:a
				{:
					RESULT = new Expr();
					RESULT.addr = RESULT.genCount();
					if(p.addr.equalsIgnoreCase(".fmt.Println"))
						p.addr="call Println";
					RESULT.code = a+"\n"+RESULT.addr+"="+p.addr+"\n"+"pop_params;";
				:};
Selector ::=  DOT:d IDENTIFIER:i
				{:
					RESULT =d+i;
				:};
Arguments ::=  	OPEN_PARAN ExpressionList:e CLOSE_PARAN
				{:
					System.out.println("arguments "+e);
					RESULT="\n"+"push_params: "+e;
				:}
				| OPEN_PARAN CLOSE_PARAN
				{:
					RESULT="";
				:};					
Function ::= 	Signature:s FunctionBody:b
				{:
					RESULT=s+b+"\n"+"end_func;";
					System.out.println("function");
				:};
FunctionBody ::= Block:b
				{:
					RESULT=b;
					System.out.println("function body ");
				:};
Block ::= 		OPEN_CURLY StatementList:s CLOSE_CURLY
				{:
					RESULT=s;
					System.out.println("BLOCK");
				:};
StatementList ::= Statement:s StatementList:sl
				{:
					RESULT=s+"\n"+sl;
				:}| {: RESULT=""; :} ;
Statement ::= 	Declaration:d
				{:
					RESULT = d;
				:}
				| SimpleStmt:s SEMI_COLON
				{:
					RESULT=s;
				:}
				| ReturnStmt:r SEMI_COLON
				{:
					RESULT=r;
				:}
				| BreakStmt:b SEMI_COLON
				{:
					RESULT=b;
				:}
				| Block:b OpSC
				{:
					RESULT=b;
				:}
				| IfStmt:i OpSC
				{:
					RESULT=i;
				:}
				| SwitchStmt:s OpSC
				{:
					RESULT=s;
				:}
				| ForStmt:f OpSC
				{:
					RESULT=f;
				:};
OpSC	::=	| SEMI_COLON;				
Declaration ::= ConstDecl:c SEMI_COLON
				{:
					RESULT = c;
					System.out.println("ConstDecl");
				:}
				| VarDecl:v SEMI_COLON
				{:
					RESULT=v;
					System.out.println("VarDecl "+v);	
				:};
TopLevelDecl ::= Declaration:d
				{:
					RESULT = d;
					System.out.println("declaration from top level decl "+d);
				:}
				| FunctionDecl:f OpSC
				{:
					RESULT=f;
					System.out.println("function declaration from top level decl with semi colon "+f);
				:}
				| MethodDecl:m OpSC
				{:
					RESULT=m;
				:};
MethodDecl ::= FUNC Receiver:r MethodName:m Function:f
				{:
					RESULT=r+m+f;
					System.out.println("method decl");
				:}
				| FUNC Receiver:r MethodName:m Signature:s
				{:
					RESULT=r+m+s;
					System.out.println("method decl");
				:};
Receiver ::= Parameters:p
			{: 
				RESULT=p;
			:};
FunctionDecl ::= FUNC FunctionName:f Function:fu
				{:
					RESULT=f+":"+"\n"+"begin_func;"+fu;
					System.out.println("function decl 2");
				:}
				| FUNC FunctionName:f Signature:s
				{:
					RESULT=f+":"+"\n"+"begin_func;"+s;
					System.out.println("function decl 1");
				:};
FunctionName ::= IDENTIFIER:i
				{:
					RESULT= "\n"+i;
					System.out.println("function name "+i);
				:};
ConstDecl ::= 	CONST ConstSpec:c
				{:
					System.out.println("constspec "+c);
					RESULT = c;
				:}
				| CONST OPEN_PARAN const_spec_zero_more:c CLOSE_PARAN
				{:
					RESULT = c;
				:};
const_spec_zero_more ::= ConstSpec:c SEMI_COLON const_spec_zero_more:cz {: RESULT = c+cz; :} | {: RESULT=""; :};
ConstSpec ::= 	IDENTIFIER:i Type EQUAL Expression:e
				{:
					System.out.println(i +" = "+ e);
					RESULT = e.code+"\n"+i +" = "+ e.addr;
				:}
				|IDENTIFIER:i EQUAL Expression:e
				{:
					System.out.println(i +" = "+ e);
					RESULT = e.code+"\n"+i +" = "+ e.addr;
				:}
				|IDENTIFIER:i
				{:
					System.out.println(i);
					RESULT = i;
				:};
VarDecl ::= 	VAR VarSpec:v
				{:
					RESULT = v;
				:}
				| VAR OPEN_PARAN var_spec_zero_more:v CLOSE_PARAN
				{:
					RESULT = v;
				:};
var_spec_zero_more ::= VarSpec:v SEMI_COLON var_spec_zero_more:vz {: RESULT = v+vz; :} | {: RESULT=""; :};
VarSpec ::= 	IDENTIFIER:i Type EQUAL Expression:e
				{:
					RESULT = e.code+"\n"+i+"="+e.addr;
				:}
				| IDENTIFIER:i Type:t
				{:
					RESULT = i;
				:}
				| IDENTIFIER:i EQUAL Expression:e
				{:
					RESULT = e.code+"\n"+i+"="+e.addr;
				:};
SimpleStmt ::= 	ExpressionStmt:e
				{:
					RESULT = e.code;
				:}
				| IncDecStmt:i
				{:
					RESULT = i;
				:}
				| Assignment:a
				{:
					RESULT = a;
				:}
				| ShortVarDecl:s
				{:
					RESULT = s;
				:};
ExpressionStmt ::= Expression:e
				{:
					RESULT = e;
				:};
IncDecStmt ::= Expression:e INCREMENT:i
				{:
					RESULT = e.code+e.addr+"="+e.addr+"+1";
				:}
				| Expression:e DECREMENT:d
				{:
					RESULT = e.code+e.addr+"="+e.addr+"-1";
				:};
Assignment ::= ExpressionList:e PLUS:p EQUAL:eq ExpressionList:el
				{:
					RESULT = e+p+eq+el;
				:}|ExpressionList:e MINUS:m EQUAL:eq ExpressionList:el
				{:
					RESULT = e+m+eq+el;
				:}|ExpressionList:e ASTRISK:a EQUAL:eq ExpressionList:el
				{:
					RESULT = e+a+eq+el;
				:}|ExpressionList:e SLASH:s EQUAL:eq ExpressionList:el
				{:
					RESULT = e+s+eq+el;
				:}|ExpressionList:e SHIFT_RIGHT:s EQUAL:eq ExpressionList:el
				{:
					System.out.println("assignment "+el);
					RESULT = e+s+eq+el;
				:}|ExpressionList:e SHIFT_LEFT:s EQUAL:eq ExpressionList:el
				{:
					System.out.println("assignment "+el);
					RESULT = e+s+eq+el;
				:}|ExpressionList:e EQUAL:eq ExpressionList:el
				{:
					System.out.println("expression list 1 "+e);
					System.out.println("expression list 2 "+el);
					RESULT = el+"\n"+e+"="+el;
				:};
ShortVarDecl ::= IdentifierList:i COLON_EQUAL:c Expression:e
				{:
					System.out.println("short var "+e.code);
					RESULT=e.code+"\n"+i+"="+e.addr;
				:};
IfStmt ::= 		IF:i SimpleStmt:s SEMI_COLON Expression:e Block:b ELSE:el IfStmt:i2
				{:
					Expr ex = new Expr();
					RESULT = s+"\n"+e.code+"\n"+i+" "+e.addr +" Goto "+ex.genIfCount()+"\n"+"Goto "+ex.genIfCount()
					+"\n"+"L"+((ex.ifCounter)-1)+":"+b+"\n"+e.genEndIfCount()+"\n"+"L"+ex.ifCounter+":"+i2+"\n"+"LL"+((ex.ifCounter)-1)+":";
				:}
				|IF:i SimpleStmt:s SEMI_COLON Expression:e Block:b ELSE:el Block:b1
				{:
					Expr ex = new Expr();
					RESULT = s+"\n"+e.code+"\n"+i+" "+e.addr+s +" Goto "+ex.genIfCount()+"\n"+"Goto "+ex.genIfCount()
					+"\n"+"L"+((ex.ifCounter)-1)+":"+b+"\n"+e.genEndIfCount()+"\n"+"L"+ex.ifCounter+":"+b1+"\n"+"LL"+((ex.ifCounter)-1)+":";
				:}
				|IF:i SimpleStmt:s SEMI_COLON Expression:e Block:b
				{:
					Expr ex = new Expr();
					RESULT = s+"\n"+e.code+"\n"+i+" "+e.addr+s +" Goto "+ex.genIfCount()+"\n"+"Goto "+ex.genIfCount()
					+"\n"+"L"+((ex.ifCounter)-1)+":"+b;
				:}
				| IF:i Expression:e Block:b ELSE:el IfStmt:i2
				{:
					Expr ex = new Expr();
					RESULT = e.code+"\n"+i+" " +e.addr+" Goto "+ex.genIfCount()+"\n"+"Goto "+ex.genIfCount()
					+"\n"+"L"+((ex.ifCounter)-1)+":"+b+"\n"+e.genEndIfCount()+"\n"+"L"+ex.ifCounter+":"+i2+"\n"+"LL"+((ex.ifCounter)-1)+":";
				:}
				| IF:i Expression:e Block:b ELSE:el Block:b1
				{:
					Expr ex = new Expr();
					RESULT = e.code+"\n"+i+" " +e.addr+" Goto "+ex.genIfCount()+"\n"+"Goto "+ex.genIfCount()
					+"\n"+"L"+((ex.ifCounter)-1)+":"+b+"\n"+e.genEndIfCount()+"\n"+"L"+ex.ifCounter+":"+b1+"\n"+"LL"+((ex.ifCounter)-1)+":";
				:}
				| IF:i Expression:e Block:b
				{:
					Expr ex = new Expr();
					RESULT = e.code+"\n"+i+" " +e.addr+" Goto "+ex.genIfCount()+"\n"+"Goto "+ex.genIfCount()
					+"\n"+"L"+((ex.ifCounter)-1)+":"+b+"\n"+"L"+ex.ifCounter+":";
				:};
SwitchStmt ::= 	ExprSwitchStmt:e
				{:
					RESULT=e;
				:};
ExprSwitchStmt ::= SWITCH:s SimpleStmt:ss SEMI_COLON Expression:e OPEN_CURLY Expr_case_clause_zero_more:ez CLOSE_CURLY
				{:
					RESULT = s+" "+ss+e.code+"\n"+ez;
				:}
				|SWITCH:s Expression:e OPEN_CURLY Expr_case_clause_zero_more:ez CLOSE_CURLY
				{:
					RESULT = s+" "+e.code+"\n"+ez;
				:}
				| SWITCH:s SimpleStmt:ss SEMI_COLON OPEN_CURLY Expr_case_clause_zero_more:ez CLOSE_CURLY
				{:
					RESULT = s+" "+ss+"\n"+ez;
				:}
				|SWITCH:s OPEN_CURLY Expr_case_clause_zero_more:ez CLOSE_CURLY
				{:
					RESULT = s+" "+"\n"+ez;
				:};
Expr_case_clause_zero_more ::= ExprCaseClause:e Expr_case_clause_zero_more:ez {: RESULT = e+ez; :} | {: RESULT=""; :};
ExprCaseClause ::= ExprSwitchCase:e COLON StatementList:s
				{:
					RESULT= e+s;
				:};
ExprSwitchCase ::= CASE:c Expression:e
				{:
					RESULT = c+" "+e.code;
				:}
				| DEFAULT:d
				{:
					RESULT = d+" ";
				:};
ForStmt ::= 	FOR:f ForClause:fc Block:b
				{:
					RESULT = f+" "+fc+"\n"+b;
				:};
Condition ::= 	Expression:e
				{:
					RESULT= e.code;
				:};
ForClause ::= 	InitStmt:i SEMI_COLON Condition:c SEMI_COLON PostStmt:p
				{:
					RESULT = i+" "+c+" "+p;
				:};
InitStmt ::= 	SimpleStmt:s
				{:
					RESULT=s;
				:};
PostStmt ::= 	SimpleStmt:s
				{:
					RESULT=s;
				:};
OperandName ::= IDENTIFIER:i
				{:
					RESULT= i;
				:}
				| QualifiedIdent:q
				{:
					RESULT=q;
				:};
QualifiedIdent ::= DOT:d PackageName:p DOT:d0 IDENTIFIER:i
				{: 
				    RESULT=d+p+d0+i;
				:};
TypeName ::= 	IDENTIFIER:i
				{: 
				    RESULT=i;	 
				:};
Type ::= 		TypeName:t
				{: 
				    RESULT=t; 
				:}
				| TypeLit:t
				{:
					RESULT=t;
				:};
TypeLit ::= 	FunctionType:f
				{: 
				    RESULT=f; 
				:};
Identifier_zero_more ::= COMMA:c IDENTIFIER:i Identifier_zero_more:iz {: RESULT=c+i+iz; :} | {: RESULT=""; :};
IdentifierList ::= 	IDENTIFIER:i Identifier_zero_more:iz
				{: 
				    RESULT=i+iz;
				:};
FunctionType ::= FUNC Signature:s
				{: 
					RESULT=s;
				    System.out.println("function type");
				:};
Signature ::= Parameters:p Result:r
				{: 
				    RESULT=p+r; 
				:}
				|Parameters:p
				{: 
				   	RESULT=p;
				    System.out.println("Signature");
				:};
Result ::= 	Parameters:p
				{: 
				    RESULT=p; 
				:}
				| OPEN_PARAN Type:t CLOSE_PARAN
				{:
					RESULT=t;
				:};
Parameters ::= OPEN_PARAN ParameterList CLOSE_PARAN
				{: 
				    RESULT="";
				:}
				|OPEN_PARAN CLOSE_PARAN
				{: 
				    RESULT=""; 
				:};
Parameter_decl_zero_more ::= COMMA ParameterDecl Parameter_decl_zero_more{: RESULT=""; :} | {: RESULT=""; :};
ParameterList ::= ParameterDecl Parameter_decl_zero_more
				{: 
				    RESULT="";
				:};
ParameterDecl ::= IdentifierList:i CDOTS Type
				{: 
				    RESULT=i;
				:}
				|IdentifierList:i Type
				{: 
				    RESULT=i; 
				:};
MethodName ::= 	IDENTIFIER:i
				{: 
				    RESULT=i; 
				:};
PackageName ::= IDENTIFIER:i
				{: 
				    RESULT=i; 
				:};
PackageClause ::= PACKAGE PackageName
				{: 
				    	
				:};
ImportPath ::= 	STRING_LIT 
				{: 
				    	 
				:};
ImportSpec ::= 	DOT ImportPath
				{: 
				    	 
				:}
				| PackageName ImportPath
				{: 
				    	 
				:}
				| ImportPath
				{: 
				    	 
				:};
import_spec_zero_more ::= ImportSpec SEMI_COLON import_spec_zero_more
						{:
						:}
						| ImportSpec import_spec_zero_more
						{:
						:}
						| ;
ImportDecl ::= 	IMPORT ImportSpec
				{: 
				    	 
				:}
				| IMPORT OPEN_PARAN import_spec_zero_more CLOSE_PARAN
				{: 
				    	 
				:};
import_decl_zero_more ::= ImportDecl SEMI_COLON import_decl_zero_more
						{:
						:}
						| ImportDecl import_decl_zero_more
						{:
						:}
						| ;
top_level_zero_more ::= TopLevelDecl:tl top_level_zero_more:tz {: System.out.println("top level zero "+tz); RESULT=tl+tz; :} | {: RESULT=""; :} ;
BreakStmt ::= 	BREAK
				{: 
				    RESULT=""; 
				:};
ReturnStmt ::= 	RETURN:r ExpressionList:e
				{: 
				    RESULT=r+" "+e;	 
				:}
				|RETURN:r
				{: 
				 	 RESULT="";
				:};
expression_zero_more ::= COMMA:c Expression:e expression_zero_more:ez {: RESULT=c+e.addr+e.code+ez; :} | {: RESULT=""; :};
ExpressionList ::= 	Expression:e expression_zero_more:ez 
				{: 
					System.out.println("expression list addr "+e.addr);
					System.out.println("expression list code "+e.code);
				    RESULT=e.addr+e.code+ez;
				:};

